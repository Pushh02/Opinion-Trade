// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  FILLED
  PARTIALLY_FILLED
  CANCELLED
}

enum Side {
  YES
  NO
}

enum MarketStatus {
  ACTIVE
  CLOSED
  RESOLVED
}

model User {
  id             String         @id
  username       String         @unique
  email          String         @unique
  password       String
  role           Role
  inrBalanceId   String         @unique
  userInrBalance InrBalance     @relation(fields: [inrBalanceId], references: [id])
  orders         Order[]
  stockBalance   StockBalance[]
}

model InrBalance {
  id             String         @id @default(cuid())
  available      Float
  locked         Float
  user           User?
}

model Market {
  id              String         @id
  symbol          String
  description     String
  endTime         DateTime
  sourceOfTruth   String
  categoryId      String
  status          MarketStatus
  lastPrice       Int
  totalVolume     Int
  resolvedOutcome Side?
  Orders          Order[]
  StockBalance    StockBalance[]
  timestamp       DateTime
}


model StockBalance {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  marketId String
  market   Market @relation(fields: [marketId], references: [id])
  side     Side
  quantity Int
  locked   Int
  userId   String
}

model Order {
  id                String      @id
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  marketId          String
  market            Market      @relation(fields: [marketId], references: [id])
  side              Side
  quantity          Int
  remainingQuantity Int
  price             Int
  status            OrderStatus
  timestamp         DateTime
}